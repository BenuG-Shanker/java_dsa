public class Main{
	public static class Node{
		int data;
		Node left;
		Node right;
		public Node(int data){
			this.data = data;
			this.left = null;
			this.right = null;
		}
	}
	public static Node insert(Node root, int val){
		if(root == null){
			root = new Node(val);
			return root;
		}
		if(root.data > val){
			root.left = insert(root.left, val);
		}
		else{
			root.right = insert(root.right, val);
		}
		return root;
	}
	public static void inOrder(Node root){
		if(root == null){
			return;
		}
		inOrder(root.left);
		System.out.print(root.data + " ");
		inOrder(root.right);
	}
	public static Node deleteNode(Node root, int val){
		if(root.data > val){
			root.left = deleteNode(root.left, val);
		}
		else if(root.data < val){
			root.right = deleteNode(root.right, val);
		}
		else{
			if(root.left==null && root.right==null){
				return null;
			}
			if(root.left==null){
				return root.right;
			}
			else if(root.right==null){
				return root.left;
			}
			Node inorderSuccessor = findInorderSuccessor(root.right);
			root.data = inorderSuccessor.data;
			root.right = deleteNode(root.right, inorderSuccessor.data);
		}
		return root;
	}
	public static Node findInorderSuccessor(Node root){
		if(root.left!=null){
			return root.left;
		}
		return root;
	}
	public static void main(String[] args){
		int[] values = {8, 5, 3, 1, 4, 6, 10, 11, 16};
		Node root = null;
		for(int i=0; i<values.length; i++){
			root = insert(root, values[i]);
		}
		inOrder(root);
		System.out.println();
		root = deleteNode(root, 1);
		System.out.println("delete 1");
		inOrder(root);
		System.out.println();
		root = deleteNode(root, 11);
		System.out.println("delete 11");
		inOrder(root);
		System.out.println();
		root = deleteNode(root, 8);
		System.out.println("delete 8");
		inOrder(root);
	}
}