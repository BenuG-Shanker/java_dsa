public class Main{
	public static class Node{
		int data;
		Node left;
		Node right;
		public Node(int data){
			this.data = data;
			this.left = null;
			this.right = null;
		}
	}
	public static class Info{
		boolean validBST;
		int size;
		int min;
		int max;
		public Info(boolean validBST, int size, int min, int max){
			this.validBST = validBST;
			this.size = size;
			this.min = min;
			this.max = max;
		}
	}
	public static int maxBSTSize = 0;
	public static Info largestBSTSize(Node root){
		if(root == null){
			return new Info(true, 0, Integer.MAX_VALUE, Integer.MIN_VALUE);
		}
		Info leftInfo = largestBSTSize(root.left);
		Info rightInfo = largestBSTSize(root.right);
		int size = leftInfo.size + rightInfo.size + 1;
		int min = Math.min(root.data, Math.min(leftInfo.min, rightInfo.min));
		int max = Math.max(root.data, Math.max(leftInfo.max, rightInfo.max));
		if(root.data<=leftInfo.max || root.data>=rightInfo.min){
			return new Info(false, size, min, max);
		}
		if(leftInfo.validBST && rightInfo.validBST){
			maxBSTSize = Math.max(maxBSTSize, size);
			return new Info(true, size, min, max);
		}
		return new Info(false, size, min, max);
	}
	public static void main(String[] args){
		Node root = new Node(50);
		root.left = new Node(30);
		root.left.left = new Node(5);
		root.left.right = new Node(20);
		root.right = new Node(60);
		root.right.left = new Node(45);
		root.right.right = new Node(70);
		root.right.right.left = new Node(65);
		root.right.right.right = new Node(80);
		largestBSTSize(root);
		System.out.println(maxBSTSize);
	}
}