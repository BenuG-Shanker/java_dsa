public class Main{
	public static class Node{
		int data;
		int height;
		Node left;
		Node right;
		public Node(int data){
			this.data = data;
			this.height = 1;
			this.left = null;
			this.right = null;
		}
	}
	public static Node root;
	public static int height(Node root){
		if(root == null){
			return 0;
		}
		return root.height;
	}
	public static Node rightRotate(Node y){
		Node x = y.left;
		Node T2 = x.right;
		x.right = y;
		y.left = T2;
		y.height = Math.max(height(y.left), height(y.right)) + 1;
		x.height = Math.max(height(x.left), height(x.right)) + 1;
		return x;
	}
	public static Node leftRotate(Node x){
		Node y = x.right;
		Node T2 = y.left;
		y.left = x;
		x.right = T2;
		x.height = Math.max(height(x.left), height(x.right)) + 1;
		y.height = Math.max(height(y.left), height(y.right)) + 1;
		return y;
	}
	public static int getBalancedFactor(Node root){
		if(root == null){
			return 0;
		}
		return height(root.left) - height(root.right);
	}
	public static Node insert(Node root, int key){
		if(root == null){
			return new Node(key);
		}
		else if(key < root.data){
			root.left = insert(root.left, key);
		}
		else if(key > root.data){
			root.right = insert(root.right, key);
		}
		else{
			return root;
		}
		root.height = Math.max(height(root.left), height(root.right)) + 1;
		int bf = getBalancedFactor(root);
		if(bf>1 && key<root.data){
			return rightRotate(root);
		}
		if(bf<-1 && key>root.data){
			return leftRotate(root);
		}
		if(bf>1 && key>root.left.data){
			root.left = leftRotate(root.left);
			return rightRotate(root);
		}
		if(bf<-1 && key<root.right.data){
			root.right = rightRotate(root.right);
			return leftRotate(root);
		}
		return root;
	}
	public static Node getMinNode(Node root){
		if(root.left!=null){
			root = root.left;
		}
		return root;
	}
	public static Node delete(Node root, int key){
		if(root == null){
			return root;
		}
		else if(key < root.data){
			root.left = delete(root.left, key);
		}
		else if(key > root.data){
			root.right = delete(root.right, key);
		}
		else{
			if(root.left==null || root.right==null){
				Node temp = null;
				if(temp == root.left){
					temp = root.right;
				}
				else{
					temp = root.left;
				}
				if(temp == null){
					temp = root;
					root = null;
				}
				else{
					root = temp;
				}
			}
			else{
				Node temp = getMinNode(root.right);
				root.data = temp.data;
				root.right = delete(root.right, temp.data);
			}
		}
		if(root == null){
			return root;
		}
		root.height = Math.max(height(root.left), height(root.right)) + 1;
		int bf = getBalancedFactor(root);
		if(bf>1 && getBalancedFactor(root.left)>=0){
			return rightRotate(root);
		}
		if(bf<-1 && getBalancedFactor(root.right)<=0){
			return leftRotate(root);
		}
		if(bf>1 && getBalancedFactor(root.left)<0){
			root.left = leftRotate(root.left);
			return rightRotate(root);
		}
		if(bf<-1 && getBalancedFactor(root.right)>0){
			root.right = rightRotate(root.right);
			return leftRotate(root);
		}
		return root;
	}
	public static void preOrder(Node root){
		if(root == null){
			return;
		}
		System.out.print(root.data + " ");
		preOrder(root.left);
		preOrder(root.right);
	}
	public static void main(String[] args){
		root = insert(root, 10);
		root = insert(root, 20);
		root = insert(root, 30);
		root = insert(root, 40);
		root = insert(root, 50);
		root = insert(root, 25);
		preOrder(root);
		delete(root, 20);
		System.out.println();
		preOrder(root);
	}
}