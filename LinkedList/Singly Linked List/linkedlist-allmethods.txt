public class Main{
	public static class Node{
        	int data;
        	Node next;
        	public Node(int data){
        		this.data = data;
	        	this.next = null;
	        }
	}
	public static Node head;
	public static Node tail;
	public static int size;
	public void addFirst(int data){
		Node new_Node = new Node(data);
	        size++;
	        if(head == null){
        		head = tail = new_Node;
			return;
	        }
	        new_Node.next = head;
	        head = new_Node;
	}
	public void addLast(int data){
	        Node new_Node = new Node(data);
        	size++;
	        if(head == null){
			head = tail = new_Node;
			return;
	        }
	        tail.next = new_Node;
	        tail = new_Node;
	}
	public void addMiddle(int index, int data){
	        if(index == 0){
        		addFirst(data);
			return;
	        }
	        Node new_Node = new Node(data);
	        size++;
	        int i = 0;
	        Node temp = head;
	        while(i < index-1){
			temp = temp.next;
			i++;
	        }
	        new_Node.next = temp.next;
	        temp.next = new_Node;
	}
	public int removeFirst(){
	        if(size == 0){
			System.out.println("ll is empty.");
			return Integer.MIN_VALUE;
	        }
	        else if(size == 1){
			int val = head.data;
			head = tail = null;
			size = 0;
			return val;
	        }
	        int val = head.data;
	        head = head.next;
	        size--;
	        return val;
	}
	public int removeLast(){
	        if(size == 0){
			System.out.println("ll is empty.");
			return Integer.MIN_VALUE;
	        }
	        else if(size == 1){
			int val = head.data;
			head = tail = null;
			size = 0;
			return val;
	        }
		Node prev = head;
		for(int i=0; i<size-2; i++){
			prev = prev.next;
	        }
	        int val = prev.next.data;
	        prev.next = null;
	        tail = prev;
	        size--;
	        return val;
	}
	public int itrSearch(int key){
	        int i = 0;
	        Node temp = head;
	        while(temp != null){
			if(temp.data == key){
				return i;
			}
			temp = temp.next;
			i++;
	        }
	        return -1;
	}
	public int helper(Node head, int key){
	        if(head == null){
			return -1;
	        }
	        if(head.data == key){
			return 0;
	        }
	        int index = helper(head.next, key);
	        if(index == -1){
			return -1;
	        }
	        return index + 1;
	}
	public int recSearch(int key){
	        return helper(head, key);	
	}
	public void getSize(){
	        Node temp = head;
	        int i = 0;
	        while(temp != null){
			i++;
			temp = temp.next;
	        }
	        System.out.println(i);
	}
	public void print(){
	        if(head == null){
			System.out.println("ll is empty.");
			return;
	        }
	        Node temp = head;
	        while(temp != null){
			System.out.print(temp.data + "->");
			temp = temp.next;
	        }
	        System.out.println("null");
	}
	public void reverse(){
	        Node prev = null;
	        Node curr = tail = head;
	        Node next;
	        while(curr != null){
			next = curr.next;
			curr.next = prev;
			prev = curr;
			curr = next;
	        }
	        head = prev;
	}
	public int removeNthfromEnd(int n){
	        if(n == size){
			int val = head.data;
			head = head.next;
			size--;
			return val;
	        }
	        int i = 1;
	        int iToFind = size - n;
	        Node prev = head;
	        while(i < iToFind){
			prev = prev.next;
			i++;
	        }
	        int val = prev.next.data;
	        prev.next = prev.next.next;
	        size--;
	        return val;
	}
	public void findMidPoint(){
	        Node slow = head;
	        Node fast = head;
	        int i = 0;
	        while(fast != null && fast.next != null){
			slow = slow.next;
			i++;
			fast = fast.next.next;
	        }
	        System.out.println("Data: " + slow.data + " & " + "index: " + i);
	}
	public Node findMid(Node head){
	        Node slow = head;
	        Node fast = head;
	        while(fast != null && fast.next != null){
			slow = slow.next;
			fast = fast.next.next;
	        }
	        return slow;
	}
	public Node reverseHalf(Node midNode){
	        Node prev = null;
	        Node curr = midNode;
	        Node next;
	        while(curr != null){
			next = curr.next;
			curr.next = prev;
			prev = curr;
			curr = next;
	        }
	        return prev;
	}
	public boolean checkPalindrome(){
	        if(head == null || head.next == null){
			return true;
	        }
	        Node midNode = findMid(head);
	        Node prev = null;
	        Node curr = midNode;
	        Node next;
	        while(curr != null){
			next = curr.next;
			curr.next = prev;
			prev = curr;
			curr = next;
	        }
	        Node right = prev;
	        Node left = head;
	        while(right != null){
			if(left.data == right.data){
		                return false;
			}
			left = left.next;
			right = right.next;
        	}
	        return true;
	}
	public void printHalfandReversedHalf(){
	        Node midNode = findMid(head);
	        Node originalNode = head;
	        while(originalNode != midNode){
			System.out.print(originalNode.data + "->");
			originalNode = originalNode.next;
	        }
	        Node reversedNode = reverseHalf(midNode);
	        while(reversedNode != null){
			System.out.print(reversedNode.data + "->");
			reversedNode = reversedNode.next;
	        }
	        System.out.println("null");
	}
	public boolean isCycle(){
	        Node slow = head;
	        Node fast = head;
	        while(fast != null && fast.next != null){
			slow = slow.next;
			fast = fast.next.next;
			if(slow == fast){
				return true;
			}
	        }
	        return false;
	}
	public void removeCycle(){
	        Node slow = head;
	        Node fast = head;
	        boolean cycle = false;
	        while(fast != null && fast.next != null){
			slow = slow.next;
			fast = fast.next.next;
			if(slow == fast){
				cycle = true;
		                break;
			}
	        }
	        if(cycle == false){
			return;
	        }
	        slow = head;
	        Node prev = null;
	        while(slow != fast){
			prev = fast;
			slow = slow.next;
			fast = fast.next;
	        }
	        prev.next = null;
	}
	public Node getMid(Node head){
	        Node slow = head;
	        Node fast = head.next;
	        while(fast != null && fast.next != null){
			slow = slow.next;
			fast = fast.next;
	        }
	        return slow;
	}
	public Node merge(Node head1, Node head2){
	        Node mergeLL = new Node(-1);
	        Node temp = mergeLL;
	        while(head1 != null && head2 != null){
			if(head1.data <= head2.data){
		                temp.next = head1;
		                head1 = head1.next;
		                temp = temp.next;
			}
			else{
		                temp.next = head2;
		                head2 = head2.next;
		                temp = temp.next;
			}
		}
	        while(head1 != null){
			temp.next = head1;
			head1 = head1.next;
			temp = temp.next;
	        }
	        while(head2 != null){
			temp.next = head2;
			head2 = head2.next;
			temp = temp.next;
	        }
	        return mergeLL.next;
	}
	public Node mergeSort(Node head){
	        if(head == null || head.next == null){
			return head;
	        }
	        Node mid = getMid(head);
	        Node rightHead = mid.next;
	        mid.next = null;
	        Node newLeft = mergeSort(head);
	        Node newRight = mergeSort(rightHead);
	        return merge(newLeft, newRight);
	}
	public void zigZag(){
	        Node slow = head;
	        Node fast = head.next;
	        while(fast != null && fast.next != null){
			slow = slow.next;
			fast = fast.next.next;
	        }
	        Node mid = slow;
	        Node curr = mid.next;
	        mid.next = null;
	        Node prev = null;
	        Node next;
	        while(curr != null){
			next = curr.next;
			curr.next = prev;
			prev = curr;
			curr = next;
	        }
	        Node left = head;
	        Node right = prev;
	        Node nextL, nextR;
	        while(left != null && right != null){
			nextL = left.next;
			left.next = right;
			nextR = right.next;
			right.next = nextL;
			left = nextL;
			right = nextR;
		}
	}
	public static void main(String[] args){
	        Main ll = new Main();
	        ll.addFirst(2);
	        ll.addFirst(1);
	        ll.addLast(4);
	        ll.addLast(5);
	        ll.addMiddle(2, 3);
	        ll.getSize();
	        ll.print();
	        System.out.println(size);
	        System.out.println(ll.removeFirst());
	        ll.getSize();
	        ll.print();
	        System.out.println(ll.removeLast());
	        ll.getSize();
	        ll.print();
	        System.out.println(ll.itrSearch(3));
	        System.out.println(ll.itrSearch(6));
	        System.out.println(ll.recSearch(3));
	        System.out.println(ll.recSearch(6));
	        ll.reverse();
	        ll.print();
	        System.out.println(ll.removeNthfromEnd(2));
	        ll.print();
	        ll.findMidPoint();
	        System.out.println(ll.checkPalindrome());
	        ll.printHalfandReversedHalf();
	        head = new Node(1);
	        Node temp = new Node(2);
	        head.next = temp;
	        head.next.next = new Node(3);
	        head.next.next.next = temp;
	        System.out.println(ll.isCycle());
	        ll.removeCycle();
	        System.out.println(ll.isCycle());
	        ll.addFirst(1);
	        ll.addLast(4);
	        ll.addLast(5);
	        ll.addMiddle(2, 3);
	        ll.print();
	        ll.mergeSort(head);
	        ll.print();
	        ll.zigZag();
	        ll.print();
		Node head1 = new Node(10);
	        Node head2 = new Node(3);
	        Node new_Node = new Node(6);
	        head2.next = new_Node;
	        new_Node = new Node(9);
	        head2.next.next = new_Node;
	        new_Node = new Node(15);
	        head2.next.next.next = new_Node;
	        head1.next = new_Node;
	        new_Node = new Node(30);
	        head1.next.next = new_Node;
	        head1.next.next.next = null;
	        Node intersectionPoint = ll.getIntersectionNode(head1, head2);
	        System.out.println((intersectionPoint==null)?"no intersection point":intersectionPoint.data);
	}
}