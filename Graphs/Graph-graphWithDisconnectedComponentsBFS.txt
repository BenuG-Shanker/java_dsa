import java.util.*;
public class Main{
	public static class Edge{
		int source;
		int destination;
		int weight;
		public Edge(int source, int destination, int weight){
			this.source = source;
			this.destination = destination;
			this.weight = weight;
		}
	}
	public static void createGraphAdjacency(ArrayList<Edge>[] graph){
		for(int i=0; i<graph.length; i++){
			graph[i] = new ArrayList<>();
		}
		graph[0].add(new Edge(0, 1, 1));
		graph[0].add(new Edge(0, 2, 1));
		graph[1].add(new Edge(1, 0, 1));
		graph[1].add(new Edge(1, 3, 1));
		graph[2].add(new Edge(2, 0, 1));
		graph[2].add(new Edge(2, 4, 1));
		graph[3].add(new Edge(3, 1, 1));
		graph[3].add(new Edge(3, 4, 1));
		graph[3].add(new Edge(3, 5, 1));
		graph[4].add(new Edge(4, 2, 1));
		graph[4].add(new Edge(4, 3, 1));
		graph[4].add(new Edge(4, 5, 1));
		graph[5].add(new Edge(5, 3, 1));
		graph[5].add(new Edge(5, 4, 1));
		graph[5].add(new Edge(5, 6, 1));
		graph[6].add(new Edge(6, 5, 1));
	}
	public static voidbreadthFirstSearch(ArrayList<Edge>[] graph){
		boolean[] visited = new boolean[graph.length];
		for(int i=0; i<graph.length; i++){
			if(!visited[i]){
				breadthFirstSearchUtility(graph, visited);
			}
		}
	}
	public static void breadthFirstSearchUtility(ArrayList<Edge>[] graph, boolean[] visited){
		Queue<Integer> q = new LinkedList<>();
		q.add(0);
		while(!q.isEmpty()){
			int current = q.remove();
			if(!visited[current]){
				System.out.print(current + " ");
				visited[current] = true;
				for(int i=0; i<graph[current].size(); i++){
					Edge e = graph[current].get(i);
					q.add(e.destination);
				}
			}
		}
	}
	public static void main(String[] args){
		int vertex = 7;
		ArrayList<Edge>[] graph = new ArrayList[vertex];
		createGraphAdjacency(graph);
		breadthFirstSearch(graph);
	}
}