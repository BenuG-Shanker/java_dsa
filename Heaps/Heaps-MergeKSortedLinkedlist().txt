import java.util.*;
public class Main{
	public static class Node{
		int data;
		Node next;
		public Node(int data){
			this.data = data;
			this.next = null;
		}
	}
	public static class NodeComparator implements Comparator<Node>{
		public int compare(Node n1, Node n2){
			if(n1.data > n2.data){
				return 1;
			}
			else if(n1.data < n2.data){
				return -1;
			}
			return 0;
		}
	}
	public static Node MergeKSortedLinkedlist(Node[] arr, int k){
		PriorityQueue<Node> pq = new PriorityQueue<>(new NodeComparator());
		Node head = new Node(0);
		Node last = head;
		for(int i=0; i<k; i++){
			pq.add(arr[i]);
		}
		while(!pq.isEmpty()){
			Node curr = pq.poll();
			last.next = curr;
			last = last.next;
			if(curr.next != null){
				pq.add(curr.next);
			}
		}
		return head.next;
	}
	public static void printList(Node node){
		while(node != null){
			System.out.print(node.data + " ");
			node = node.next;
		}
	}
	public static void main(String[] args){
		int n = 3;
		Node[] arr = new Node[n];
		Node head1 = new Node(2);
		arr[0] = head1;
		head1.next = new Node(4);
		head1.next.next = new Node(6);
		head1.next.next.next = new Node(8);
		Node head2 = new Node(1);
		arr[1] = head2;
		head2.next = new Node(3);
		head2.next.next = new Node(5);
		head2.next.next.next = new Node(7);
		Node head3 = new Node(0);
		arr[2] = head3;
		head3.next = new Node(9);
		head3.next.next = new Node(10);
		head3.next.next.next = new Node(11);
		Node res = MergeKSortedLinkedlist(arr, n);
		if(res != null){
			printList(res);
		}
	}
}