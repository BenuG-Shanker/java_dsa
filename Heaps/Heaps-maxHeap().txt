import java.util.*;
public class Main{
	public static class Heap{
		ArrayList<Integer> arr = new ArrayList<>();
		public void add(int data){
			arr.add(data);
			int childIndex = arr.size() - 1;
			int parentIndex = (childIndex - 1) / 2;
			while(arr.get(childIndex) > arr.get(parentIndex)){
				int temp = arr.get(childIndex);
				arr.set(childIndex, arr.get(parentIndex));
				arr.set(parentIndex, temp);
				childIndex = parentIndex;
				parentIndex = (childIndex - 1) / 2;
			}
		}
		public int peek(){
			return arr.get(0);
		}
		public void maximum_heapify(int i){
			int left = 2*i + 1;
			int right = 2*i + 2;
			int maxIndex = i;
			if(left<arr.size() && arr.get(maxIndex)<arr.get(left)){
				maxIndex = left;
			}
			if(right<arr.size() && arr.get(maxIndex)<arr.get(right)){
				maxIndex = right;
			}
			if(maxIndex != i){
				int temp = arr.get(i);
				arr.set(i, arr.get(maxIndex));
				arr.set(maxIndex, temp);
				maximum_heapify(i);
			}
		}
		public int remove(){
			int data = arr.get(0);
			int temp = arr.get(0);
			arr.set(0, arr.get(arr.size() - 1));
			arr.set(arr.size() - 1, temp);
			arr.remove(arr.size() - 1);
			maximum_heapify(0);
			return data;
		}
		public boolean isEmpty(){
			return arr.size() == 0;
		}
	}
	public static void main(String[] args){
		Heap maxHeap = new Heap();
		maxHeap.add(3);
		maxHeap.add(4);
		maxHeap.add(1);
		maxHeap.add(5);
		while(!maxHeap.isEmpty()){
			System.out.print(maxHeap.peek() + " ");
			maxHeap.remove();
		}
	}
}